
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # docker_container.web[0m will be created
[0m  [32m+[0m[0m resource "docker_container" "web" {
      [32m+[0m[0m attach                                      = false
      [32m+[0m[0m bridge                                      = (known after apply)
      [32m+[0m[0m command                                     = (known after apply)
      [32m+[0m[0m container_logs                              = (known after apply)
      [32m+[0m[0m container_read_refresh_timeout_milliseconds = 15000
      [32m+[0m[0m entrypoint                                  = (known after apply)
      [32m+[0m[0m env                                         = [
          [32m+[0m[0m "TZ=Asia/Kolkata",
        ]
      [32m+[0m[0m exit_code                                   = (known after apply)
      [32m+[0m[0m hostname                                    = (known after apply)
      [32m+[0m[0m id                                          = (known after apply)
      [32m+[0m[0m image                                       = (known after apply)
      [32m+[0m[0m init                                        = (known after apply)
      [32m+[0m[0m ipc_mode                                    = (known after apply)
      [32m+[0m[0m log_driver                                  = (known after apply)
      [32m+[0m[0m logs                                        = false
      [32m+[0m[0m must_run                                    = true
      [32m+[0m[0m name                                        = "tf-nginx"
      [32m+[0m[0m network_data                                = (known after apply)
      [32m+[0m[0m network_mode                                = "bridge"
      [32m+[0m[0m read_only                                   = false
      [32m+[0m[0m remove_volumes                              = true
      [32m+[0m[0m restart                                     = "unless-stopped"
      [32m+[0m[0m rm                                          = false
      [32m+[0m[0m runtime                                     = (known after apply)
      [32m+[0m[0m security_opts                               = (known after apply)
      [32m+[0m[0m shm_size                                    = (known after apply)
      [32m+[0m[0m start                                       = true
      [32m+[0m[0m stdin_open                                  = false
      [32m+[0m[0m stop_signal                                 = (known after apply)
      [32m+[0m[0m stop_timeout                                = (known after apply)
      [32m+[0m[0m tty                                         = false
      [32m+[0m[0m wait                                        = false
      [32m+[0m[0m wait_timeout                                = 60

      [32m+[0m[0m healthcheck (known after apply)

      [32m+[0m[0m labels (known after apply)

      [32m+[0m[0m networks_advanced {
          [32m+[0m[0m aliases      = []
          [32m+[0m[0m name         = "tf-demo-net"
            [90m# (2 unchanged attributes hidden)[0m[0m
        }

      [32m+[0m[0m ports {
          [32m+[0m[0m external = 8080
          [32m+[0m[0m internal = 80
          [32m+[0m[0m ip       = "0.0.0.0"
          [32m+[0m[0m protocol = "tcp"
        }
    }

[1m  # docker_image.nginx[0m will be created
[0m  [32m+[0m[0m resource "docker_image" "nginx" {
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m image_id     = (known after apply)
      [32m+[0m[0m keep_locally = true
      [32m+[0m[0m name         = "nginx:alpine"
      [32m+[0m[0m repo_digest  = (known after apply)
    }

[1m  # docker_network.demo[0m will be created
[0m  [32m+[0m[0m resource "docker_network" "demo" {
      [32m+[0m[0m driver      = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m internal    = (known after apply)
      [32m+[0m[0m ipam_driver = "default"
      [32m+[0m[0m name        = "tf-demo-net"
      [32m+[0m[0m options     = (known after apply)
      [32m+[0m[0m scope       = (known after apply)

      [32m+[0m[0m ipam_config (known after apply)
    }

[1mPlan:[0m 3 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m container_id   = (known after apply)
  [32m+[0m[0m container_name = "tf-nginx"
  [32m+[0m[0m web_url        = "http://localhost:8080"
[0m[1mdocker_image.nginx: Creating...[0m[0m
[0m[1mdocker_network.demo: Creating...[0m[0m
[0m[1mdocker_network.demo: Creation complete after 2s [id=9cd63323040714e8737935062c92118efeea00e18720aa1d282219f0a9771f67][0m
[0m[1mdocker_image.nginx: Still creating... [00m10s elapsed][0m[0m
[0m[1mdocker_image.nginx: Still creating... [00m20s elapsed][0m[0m
[0m[1mdocker_image.nginx: Still creating... [00m30s elapsed][0m[0m
[0m[1mdocker_image.nginx: Still creating... [00m40s elapsed][0m[0m
[0m[1mdocker_image.nginx: Still creating... [00m50s elapsed][0m[0m
[0m[1mdocker_image.nginx: Still creating... [01m00s elapsed][0m[0m
[0m[1mdocker_image.nginx: Still creating... [01m10s elapsed][0m[0m
[0m[1mdocker_image.nginx: Creation complete after 1m12s [id=sha256:4a86014ec6994761b7f3118cf47e4b4fd6bac15fc6fa262c4f356386bbc0e9d9nginx:alpine][0m
[0m[1mdocker_container.web: Creating...[0m[0m
[0m[1mdocker_container.web: Creation complete after 1s [id=70b00e48df80c74125ed43cf2f31271f7159f033aa3dca5c96881f0978122ed6][0m
[0m[1m[32m
Apply complete! Resources: 3 added, 0 changed, 0 destroyed.
[0m[0m[1m[32m
Outputs:

[0mcontainer_id = "70b00e48df80c74125ed43cf2f31271f7159f033aa3dca5c96881f0978122ed6"
container_name = "tf-nginx"
web_url = "http://localhost:8080"
